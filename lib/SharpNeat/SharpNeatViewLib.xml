<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpNeatViewLib</name>
    </assembly>
    <members>
        <member name="T:SharpNeat.View.GraphControl">
            <summary>
            A user control for visualization of node graphs.
            </summary>
        </member>
        <member name="F:SharpNeat.View.GraphControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharpNeat.View.GraphControl.#ctor">
            <summary>
            Default constructor. Required for user controls.
            </summary>
        </member>
        <member name="M:SharpNeat.View.GraphControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SharpNeat.View.GraphControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SharpNeat.View.GraphControl.RefreshImage">
            <summary>
            Refresh the image of the graph being displayed by the control.
            </summary>
        </member>
        <member name="P:SharpNeat.View.GraphControl.ViewportPainter">
            <summary>
            Gets or sets the viewport painter. Viewport painters can be switched and therefore allow 
            this control to display whatever the provided viewport painter paints.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.GraphNode">
            <summary>
            Represents a node in a graph.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.GraphNode.#ctor(System.String)">
            <summary>
            Constructs with the provided string tag.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.GraphNode.#ctor(System.String,System.Drawing.Point)">
            <summary>
            Constructs with the provided string tag and position.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.GraphNode.#ctor(System.String,System.Drawing.Point,System.Object[])">
            <summary>
            Constructs with the provided string tag, position and auxilliary data.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.GraphNode.#ctor(System.String,System.Drawing.Point,System.Object[],System.Int32)">
            <summary>
            Constructs with the provided string tag, position, auxilliary data and node depth.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphNode.Tag">
            <summary>
            Gets or sets the node's tag.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphNode.Position">
            <summary>
            Gets or sets the node's position.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphNode.AuxData">
            <summary>
            Gets or sets an array of auxilliary data.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphNode.Depth">
            <summary>
            Depth of the node within the network. Input nodes are defined as beign at depth zero,
            all other nodes are defined by the number of connection hops to reach them from an input node.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphNode.InConnectionList">
            <summary>
            Gets the node's list of input connections.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphNode.OutConnectionList">
            <summary>
            Gets the node's list of output connections.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.NetworkGraphFactory">
            <summary>
            A factory that creates IOGraph objects from INetworkDefinition(s).
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.NetworkGraphFactory.CreateGraph(SharpNeat.Network.INetworkDefinition)">
            <summary>
            Create an IOGraph that represents the structure described by the provided INetworkDefinition.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.NetworkGraphFactory.CreateGraphNodeAuxData(SharpNeat.Network.INetworkNode)">
            <summary>
            Create auxilliary data for the specified INetworkNode.
            This version places the node activation function ID into element 0 of the aux data array.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.CppnGraphPainter">
            <summary>
            Paints CPPNGraphs to a GDI+ Graphics object.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.IOGraphPainter">
            <summary>
            Paints IOGraphs to a GDI+ Graphics object.
            </summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.NodeDiameterModel">
            <summary>Diameter of a node in the model coordinate space.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.__fontNodeTag">
            <summary>Font for drawing text on the viewport.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.__brushBlack">
            <summary>Black brush</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.__brushNodeFill">
            <summary>Brush for node fill color.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.__penBlack">
            <summary>Black pen for node borders.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter._connectionPositive">
            <summary>Pen for drawing connections with positive connection weight.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter._connectionNegative">
            <summary>Pen for drawing connections with negative connection weight.</summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphPainter.PaintNetwork(SharpNeat.View.Graph.IOGraph,System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
            <summary>
            Paints the provided IOGraph onto the provided GDI+ Graphics drawing surface.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphPainter.PaintNetwork(SharpNeat.View.Graph.IOGraph,SharpNeat.View.Graph.IOGraphPainter.PaintState)">
            <summary>
            Paints the provided IOGraph onto the current GDI+ Graphics drawing surface.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphPainter.PaintNode(SharpNeat.View.Graph.GraphNode,SharpNeat.View.Graph.IOGraphPainter.PaintState)">
            <summary>
            Paints a single graph node.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphPainter.ModelToViewport(System.Drawing.Point,SharpNeat.View.Graph.IOGraphPainter.PaintState)">
            <summary>
            Converts from a model coordinate to a viewport coordinate.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphPainter.IsPointWithinViewport(System.Drawing.Point,SharpNeat.View.Graph.IOGraphPainter.PaintState)">
            <summary>
            Indicates if a point is within the graphics area represented by the viewport.
            That is, does an element at this position need to be painted.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.IOGraphPainter.PaintState">
            <summary>
            Represents data required for by painting routines.
            </summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._g">
            <summary>The current GDI+ painting surface.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._viewportArea">
            <summary>The area being painted to. Any elements outside of this area are not visible.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._zoomFactor">
            <summary>Scales the elements being drawn.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._connectionWeightRange">
            <summary>Range of connections weights. Used to determine width of drawn connections.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._connectionWeightRangeHalf">
            <summary>Use in conjunction with _connectionWeightRange to draw connections.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._connectionWeightToWidth">
            <summary>Uses in conjunction with _connectionWeightRange to draw connections.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._nodeDiameter">
            <summary>Diameter of drawn nodes.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._nodeDiameterHalf">
            <summary>Used in conjunction with _nodeDiameter to draw nodes.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._backConnectionLegLength">
            <summary>Length of connection legs eminating from the base of nodes when drawing conenctions
            to nodes above the source node.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.PaintState._nodeStateDict">
            <summary>
            Dictionary containing temporary painting related state for each graph node.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphPainter.PaintState.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Construct with the provided Graphics painting surface and state data.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphPainter.PaintState.GetNodeStateInfo(SharpNeat.View.Graph.GraphNode)">
            <summary>
            Gets the state object for a given graph node. Creates the object if it does not yet exist.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.IOGraphPainter.ConnectionPointInfo">
            <summary>
            Class used for tracking connection point on nodes when drawing backwards directed 
            connections (target node higher than the source node).
            </summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.ConnectionPointInfo._upperLeft">
            <summary>Running connection count for top left of node.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.ConnectionPointInfo._upperRight">
            <summary>Running connection count for top right of node.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.ConnectionPointInfo._lowerLeft">
            <summary>Running connection count for bottom left of node.</summary>
        </member>
        <member name="F:SharpNeat.View.Graph.IOGraphPainter.ConnectionPointInfo._lowerRight">
            <summary>Running connection count for bottom right of node.</summary>
        </member>
        <member name="M:SharpNeat.View.Graph.CppnGraphPainter.#ctor(SharpNeat.Network.IActivationFunctionLibrary)">
            <summary>
            Construct with the provided activation function library.
            This must be the same library used by the genomes/graphs being painted. 
            A legend of the activation functions is shown and the nodes are color coded to indicate the
            activation function at each node.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.CppnGraphPainter.PaintNetwork(SharpNeat.View.Graph.IOGraph,SharpNeat.View.Graph.IOGraphPainter.PaintState)">
            <summary>
            Paints the provided IOGraph onto the provided GDI+ Graphics drawing surface.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.CppnGraphPainter.PaintNode(SharpNeat.View.Graph.GraphNode,SharpNeat.View.Graph.IOGraphPainter.PaintState)">
            <summary>
            Override that paints nodes with a fill color that represents each node's activation function.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Viewport">
            <summary>
            A user control that provides a re resizable area that can be painted to by an 
            IViewportPainter.
            </summary>
        </member>
        <member name="F:SharpNeat.View.Viewport.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Viewport.#ctor">
            <summary>
            Default constructor. Required for user controls.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Viewport.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Viewport.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Viewport.RefreshImage">
            <summary>
            Refresh/repaint the image being displayed by the control.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Viewport.ViewportPainter">
            <summary>
            Gets or sets the viewport's IViewportPainter.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Viewport.ZoomFactor">
            <summary>
            Gets or sets the viewport's zoom factor.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.DepthLayoutManager">
            <summary>
            An ILayoutManager that positions nodes in layers based on their depth in the network.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.ILayoutManager">
            <summary>
            Interface for types that position nodes of an IOGraph within a specified 2D layout area.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.ILayoutManager.Layout(SharpNeat.View.Graph.IOGraph,System.Drawing.Size)">
            <summary>
            Position/layout the nodes of an IOGraph within a specified 2D layout area.
            </summary>
            <param name="graph">The network/graph structure to be layed out.</param>
            <param name="layoutArea">The area the structrue is to be layed out on.</param>
        </member>
        <member name="M:SharpNeat.View.Graph.DepthLayoutManager.Layout(SharpNeat.View.Graph.IOGraph,System.Drawing.Size)">
             <summary>
             Layout nodes based on their depth within the network.
             
             Note 1.
             Input nodes are defined as being at layer zero and we position them in their own layer at the 
             top of the layout area. Any other type of node (hidden or output) node not connected to is also
             defined as being at layer zero, if such nodes exist then we place them into their own layout 
             layer to visually separate them from the input nodes.
             
             Note 2.
             Output nodes can be at a range of depths, but for clarity we position them all in their own layer 
             at the bottom of the layout area. A hidden node can have a depth greater than or equal to one or 
             more of the output nodes, to handle this case neatly we ensure that the output nodes are always 
             in a layer by themselves by creating an additional layer in the layout if necessary.
            
             Note 3.
             Hidden nodes are positioned into layers between the inputs and outputs based on their depth.
             
             Note 4. 
             Empty layers are not possible in the underlying network because for there to be a layer N node it 
             must have a connection from a layer N-1 node. However, in cyclic networks the output nodes can be
             source nodes, but we also always paint output nodes in their own layout layer at the bottom of the
             layout area. Therefore if the only node at a given depth is an output node then the layout layer 
             can be empty. To handle this neatly we check for empty layout layers before invoking the layout logic.
             </summary>
             <param name="graph">The network/graph structure to be layed out.</param>
             <param name="layoutArea">The area the structure is to be layed out on.</param>
        </member>
        <member name="T:SharpNeat.View.Graph.GridLayoutManager">
            <summary>
            An ILayoutManager that positions nodes evenly spaced out on a grid.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.GridLayoutManager.Layout(SharpNeat.View.Graph.IOGraph,System.Drawing.Size)">
            <summary>
            Layout nodes evenly spaced out on a grid.
            </summary>
            <param name="graph">The network/graph structure to be layed out.</param>
            <param name="layoutArea">The area the structrue is to be layed out on.</param>
        </member>
        <member name="T:SharpNeat.View.Graph.GraphConnection">
            <summary>
            Represents a connection in a graph.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.GraphConnection.#ctor(SharpNeat.View.Graph.GraphNode,SharpNeat.View.Graph.GraphNode,System.Single)">
            <summary>
            Constructs a connection between the specified source and target nodes and of the specified weight.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphConnection.SourceNode">
            <summary>
            Gets or sets the connection's source node.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphConnection.TargetNode">
            <summary>
            Gets or sets the connection's target node.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.GraphConnection.Weight">
            <summary>
            Gets or sets the connection's weight.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.IOGraphViewportPainter">
            <summary>
            An IViewportPainter that paints IOGraph objects.
            </summary>
        </member>
        <member name="T:SharpNeat.View.IViewportPainter">
            <summary>
            Interface that represents types that paint to a viewport.
            </summary>
        </member>
        <member name="M:SharpNeat.View.IViewportPainter.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
            <summary>
            Paints onto the specified viewport.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphViewportPainter.#ctor(SharpNeat.View.Graph.IOGraphPainter)">
            <summary>
            Constructs with the provided graph painter and a default layout manager.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphViewportPainter.#ctor(SharpNeat.View.Graph.IOGraphPainter,SharpNeat.View.Graph.ILayoutManager)">
            <summary>
            Constructs with the provided graph painter and layout manager.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraphViewportPainter.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
            <summary>
            Paints the wrapped IOGraph onto the specified viewport. Does nothing if no 
            IOGraph has been provided.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.IOGraphViewportPainter.IOGraph">
            <summary>
            Gets or sets the IOGraph to paint.
            </summary>
        </member>
        <member name="T:SharpNeat.View.Graph.IOGraph">
            <summary>
            Represents a [weighted and directed] graph of connected nodes with nodes divided into 
            three types/groups; Input nodes, output nodes and hidden nodes. 
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraph.#ctor(System.Single)">
            <summary>
            Construct with the specified connection weight range. Weight range is used to determine
            each connection's strength relative to the overall range.
            </summary>
        </member>
        <member name="M:SharpNeat.View.Graph.IOGraph.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Construct with the specified input, output and hidden node count. Counts are used to 
            pre-allocate storage.
            Weight range is used to determine each connection's strength relative to the overall range.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.IOGraph.InputNodeList">
            <summary>
            Gets the list of input nodes.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.IOGraph.OutputNodeList">
            <summary>
            Gets the list of output nodes.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.IOGraph.HiddenNodeList">
            <summary>
            Gets the list of hidden nodes.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.IOGraph.ConnectionWeightRange">
            <summary>
            Gets the connection weight range.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.IOGraph.Bounds">
            <summary>
            Gets or sets the bounds of the model elements.
            </summary>
        </member>
        <member name="P:SharpNeat.View.Graph.IOGraph.Depth">
            <summary>
            Indicates the total depth of the network. 
            E.g. a network with a single hidden node connected up to an input and output will have three layers
            (input, hidden layer 1, output) and will thus have a depth of 3. The layers are assigned deph values
            of 0, 1 and 2 respectively.
            </summary>
        </member>
    </members>
</doc>
